@import "../../vars/index";

/// Get a full map of a single typography dimension.
/// Optionally get only a specific breakpoint.
/// @group typography
/// @require {map} $typography-dimensions-map
/// @example scss - get page-heading
///     get-typography-dimensions-map(page-heading);
///     // (
///     //   "font-size": 28,
///     //   "line-height": 36,
///     //   "letter-spacing": 0.1,
///     // )
/// @example scss - get page-heading, at medium breakpoint
///     get-typography-dimensions-map(page-heading, medium);
///     // (
///     //   "font-size": 36,
///     //   "line-height": 44,
///     // ),
/// @param {string} $name - typography dimension name
/// @param {string} $breakpoint [null] - breakpoint name
/// @return {map} map of typ-dimensions & their values
@function get-typography-dimensions-map($name, $breakpoint: null) {
  $map: map-get($typography-dimensions-map, $name);

  @if $breakpoint {
    $breakpoints: map-get($map, "breakpoints");
    $map: map-get($breakpoints, $breakpoint);
  }

  @return $map;
}

/// Get the value of a single CSS property of typography dimension
/// @group typography
/// @require get-typography-dimensions-map
/// @example scss - get font-size of page-heading
///     get-typography-dimension-value(page-heading, font-size);
///     //   28
/// @example scss - get font-size of page-heading, at medium breakpoint
///     get-typography-dimensions-map(page-heading, font-size, medium);
///     //   36
/// @param {string} $name - typography dimension name
/// @param {string} $prop - property name
/// @param {string} $breakpoint [null] - breakpoint name
/// @return {string} value of CSS property
@function get-typography-dimension-value($name, $prop, $breakpoint: null) {
  $map: get-typography-dimensions-map($name, $breakpoint);

  $val: null;

  @if map-has-key($map, $prop) {
    $val: map-get($map, $prop);
  }

  @return $val;
}

/// Get a list of all breakpoint names for a single typography dimension name
/// @group typography
/// @require $typography-dimensions-map
/// @example scss
///     get-typography-dimension-breakpoints("page-heading")
///     // (medium, large)
/// @param {string} $name - typography dimension name
/// @return {list} list of breakpoint names
@function get-typography-dimension-breakpoints($name) {
  $map: map-get($typography-dimensions-map, $name);
  $list: ();

  @if map-has-key($map, "breakpoints") {
    $breakpoints: map-get($map, "breakpoints");
    $list: map-keys($breakpoints);
  }

  @return $list;
}

/// Get a font-size value, by name.
/// Optionally specify breakpoint.
/// @group typography
/// @require get-typography-dimension-value
/// @example scss - get value for page-heading
///     font-size("page-heading")
///     // 28
/// @example scss - get value for page-heading, at medium breakpoint
///     font-size("page-heading", medium)
///     // 36
/// @param {string} $name - typography dimension name
/// @return {string} font-size value
@function font-size($name, $breakpoint: null) {
  $prop: "font-size";

  @return get-typography-dimension-value($name, $prop, $breakpoint);
}

/// Get a line-height value, by name.
/// Optionally specify breakpoint.
/// @group typography
/// @require get-typography-dimension-value
/// @example scss - get value for page-heading
///     line-height("page-heading")
///     // 36
/// @example scss - get value for page-heading, at medium breakpoint
///     line-height("page-heading", medium)
///     // 44
/// @param {string} $name - typography dimension name
/// @return {string} line-height value
@function line-height($name, $breakpoint: null) {
  $prop: "line-height";

  @return get-typography-dimension-value($name, $prop, $breakpoint);
}

/// Get a letter-spacing value, by name.
/// Optionally specify breakpoint.
/// @group typography
/// @require get-typography-dimension-value
/// @example scss - get value for page-heading
///     letter-spacing("page-heading")
///     // 0.1
/// @example scss - get value for page-heading, at medium breakpoint
///     letter-spacing("page-heading", medium)
///     // 0.2
/// @param {string} $name - typography dimension name
/// @return {string} letter-spacing value
@function letter-spacing($name, $breakpoint: null) {
  $prop: "letter-spacing";

  @return get-typography-dimension-value($name, $prop, $breakpoint);
}

/// Get a font-family value, by name.
/// @group typography
/// @require {map} $font-families-map
/// @require {string} $font-family-default
/// @example scss
///     font-family("sans");
///     // Arial, sans-serif;
/// @param {string} $name [$font-family-default] - font-family name
/// @return {string} font-family value
@function font-family($name: $font-family-default) {
  @return map-get($font-families-map, $name);
}

/// Get a font-weight value, by name.
/// @group typography
/// @require {map} $font-weights-map
/// @require {string} $font-weight-default
/// @example scss
///     font-weight("bold");
///     // 700;
/// @param {string} $name [$font-weight-default] - font-weight name
/// @return {string} font-weight value
@function font-weight($name: $font-weight-default) {
  @return map-get($font-weights-map, $name);
}
